package winsome_server;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;

import java.io.File;
import java.io.IOException;

public class Post_ID implements JSON_Serializable {
	// Member variables
	private String id;
	private static String last_id = "0";

	private static final Object lock = new Object();

	// Constructor
	public Post_ID() {
		/*
		 * This constructor is used when we want to create a new post id for a new post.
		 *
		 * The id is generated by incrementing the last id by 1.
		 *
		 * 1. Read the last id from the static variable last_id.
		 * 2. Increment the last id by 1.
		 * 3. Write the new last id to the static variable last_id.
		 * 4. Set the id of this object to the new last id.
		 */

		synchronized (lock) {

			// 1. Read the last id from the static variable last_id.
			String last_id = Post_ID.last_id;

			// 2. Increment the last id by 1.
			String new_id = Integer.toString(Integer.parseInt(last_id) + 1);

			// 3. Write the new last id to the static variable last_id.
			Post_ID.last_id = new_id;

			// 4. Set the id of this object to the new last id.
			this.id = new_id;
		}
	}

	// Methods

	// Getters

	public String getId() {
		return id;
	}

	public static String getLast_id() {
		return last_id;
	}

	// Setters

	public void setId(String id) {
		this.id = id;
	}

	public static void setLast_id(String last_id) {
		Post_ID.last_id = last_id;
	}


	// Interface methods
	@Override
	public void JSON_write(String filePath) throws IOException {
		ObjectMapper mapper = new ObjectMapper();
		mapper.enable(SerializationFeature.INDENT_OUTPUT);
		mapper.writeValue(new File(filePath), this);
	}

	public static Post_ID JSON_read(String filePath) throws IOException {
		ObjectMapper mapper = new ObjectMapper();
		return mapper.readValue(new File(filePath), Post_ID.class);
	}
}
